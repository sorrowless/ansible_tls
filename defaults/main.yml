---
tls_common:
  # Types: local, acme
  ## Local cert variables
  type: local
  local_src_key: false
  local_src_cert: false
  ## Acme cert variables
  ### Available tools: acme.sh
  acme_tool: acme.sh
  ### List of domain names to get certificates for
  acme_domains: []
  ### Hooks
  acme_hooks: true
  acme_pre_hook: 'systemctl stop nginx'
  acme_post_hook: 'systemctl start nginx'
  ### Challenge types: standalone, dns
  acme_challenge: standalone
  #### Dns challenge vars
  ##### Type of supported dns api
  acme_ch_dns_type: dns_gd
  ##### Vars which need to be exported in case of dns api usage
  ##### About naming look at https://github.com/Neilpang/acme.sh/tree/master/dnsapi
  acme_ch_dns_vars:
    GD_Key: somekeyshouldbehere
    GD_Secret: secretshouldbehere
  # After moving to ZeroSSL account is required
  acme_default_ca: letsencrypt
  acme_account_email: me@example.com
  # Whether or not use notifications
  acme_notify: false
  acme_notify_envvars: ""
  acme_notify_hook_type: telegram
  acme_force: ""
  # Dir where certs will be placed to
  target_dir: /etc/ssl_certs
  target_ca_path: ""
  target_cert_path: ""
  target_key_path: ""
  target_fullchain_path: ""
  # Formats: nginx, haproxy
  target_format: nginx
  target_key_name: private.pem
  target_cert_name: cert.pem
  target_fullchain_name: fullchain.pem
  target_ca_name: ca.pem
  # If target_format is 'haproxy', this filename will be used
  target_bundle_name: bundle.pem
  webroot_dir: /var/www/le_root
  # Whether to try use already created account on the host
  use_cached_account: true
  self_signed: false
  self_signed_domain: site.local
  keylength: ec-256
tls_group: {}
tls_host: {}
