---
- name: TLS | Acme | Check if domain names set properly
  debug:
    msg: "Variable acme_domains with domain names list should be set"
  when: tls.acme_domains | length == 0

- name: Run acme certificate issuance
  block:
    - name: TLS | Pre-installation | Install prerequisites
      become: yes
      become_user: root
      package:
        name: "{{ item }}"
        state: present
      ignore_errors: yes
      with_items:
        - git
        - curl
        - socat

    - name: TLS | Installation | Ensure acme.sh repo destination dir
      become: yes
      become_user: root
      set_fact:
        acme_checkout_dir: /root/acme.sh
        acme_dir: "{{ '/root/.acme.sh.' + tls.acme_domains[0] }}"

    - name: TLS | Installation | Checkout acme.sh repo
      become: yes
      become_user: root
      git:
        repo: https://github.com/acmesh-official/acme.sh.git
        dest: "{{ acme_checkout_dir }}"
        version: master

    - name: TLS | Installation | Install acme.sh to the system
      become: yes
      become_user: root
      command: >
        ./acme.sh --install --home {{ acme_dir }}
          --config-home {{ acme_dir }} --cert-home {{ acme_dir }} --nocron --noprofile
      args:
        chdir: "{{ acme_checkout_dir }}"
        # It would be nice not to recreate these environments but in case
        # acme.sh changed according to the acme protocol, we have to update
        # them to work properly
        # creates: "{{ acme_dir }}/acme.sh"

    # In case there already was some installation of acme.sh
    - name: TLS | Installation | Check for autogenerated crontab entry
      become: yes
      become_user: root
      shell:
        cmd: |
          crontab -l | egrep -q '.*acme.sh.*dev/null.*'
      changed_when: false
      failed_when: false
      register: crontab_default_acme_entry

    - name: TLS | Instalation | Delete autogenerated crontab entry
      become: yes
      become_user: root
      shell:
        cmd: |
          crontab -l | sed '/.*acme.sh.*\/dev\/null.*/d' | crontab -
      when: crontab_default_acme_entry.rc == 0

    - name: Check acme_challenge
      fail: msg="You use acme_challenge ="{{tls.acme_challenge }}". Please use webroot, standalone or dns method."
      when:
        - tls.acme_challenge != "webroot"
        - tls.acme_challenge != "standalone"
        - tls.acme_challenge != "dns"

    - name: TLS | Installation | Add new entry to existing crontab entries
      become: yes
      become_user: root
      ansible.builtin.cron:
        name: "TLS update from config directory - {{ acme_dir }}"
        user: "root"
        minute: "{{ 60 | random }}"
        hour: "{{ 5 | random }}"
        job: "{{ acme_dir }}/acme.sh --cron --home {{ acme_dir }} --config-home {{ acme_dir }}"
        state: "present"

    - name: TLS | Installation | Convert domains list to appropriate format
      set_fact:
        # To understand this, look at https://medium.com/@george.shuklin/data-manipulation-in-ansible-bab8eb7d7f93
        acme_domains: '{{ tls.acme_domains | map("regex_replace", "^(.*)$", " -d \1") | list | join(" ") | safe }}'

    - name: TLS | Installation | Show resulting domains line
      debug:
        msg: "{{ acme_domains }}"

    - name: TLS | Installation | Create directory for certificates
      become: yes
      become_user: root
      file:
        path: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: TLS | Installation | Create hooks string
      set_fact:
        acme_hooks: '--pre-hook "{{ tls.acme_pre_hook }}" --post-hook "{{ tls.acme_post_hook }}"'
      when: tls.acme_hooks

    - name: TLS | Certificate Issue | Ensure .well-known directory for webroot
      become: yes
      become_user: root
      file:
        path: "{{ tls.webroot_dir}}/.well-known/acme-challenge"
        state: directory
        mode: 0755
        owner: root
        group: www-data
      when: tls.acme_challenge == "webroot"

    - name: TLS | Certificate Issue | Set default CA
      become: yes
      become_user: root
      shell:
        cmd: |
          ./acme.sh --set-default-ca --server {{ tls.acme_default_ca }} \
      args:
        chdir: "{{ acme_dir }}"
      environment: "{{ tls.acme_ch_dns_vars }}"

    - name: TLS | Certificate Issue | Set cached account data
      include_tasks:
        file: acme_cache_account.yml
        apply:
          tags: 
            - cache_account
      tags:
        - cache_account
      when:
        - tls.use_cached_account

    - name: TLS | Certificate Issue | Register account prior to issue certificate
      become: yes
      become_user: root
      shell:
        cmd: |
          ./acme.sh --register-account -m {{ tls.acme_account_email }} \
          --home {{ acme_dir }} --config-home {{ acme_dir }}
      args:
        chdir: "{{ acme_dir }}"
      when:
        - (not tls.use_cached_account) or cached_account_not_found
      tags:
        - tls_register_account
      failed_when: false

    - name: Set var for CA path
      set_fact:
        tls_target_ca_path: "{{ tls.target_dir + '/' + tls.acme_domains[0] + '/' + tls.target_ca_name }}"
      when:
        - tls.target_ca_path == ""

    - name: Set var for key path
      set_fact:
        tls_target_key_path: "{{ tls.target_dir + '/' + tls.acme_domains[0] + '/' + tls.target_key_name }}"
      when:
        - tls.target_key_path == ""

    - name: Set var for fullchain path
      set_fact:
        tls_target_fullchain_path: "{{ tls.target_dir + '/' + tls.acme_domains[0] + '/' + tls.target_fullchain_name }}"
      when:
        - tls.target_fullchain_path == ""

    - name: Set var for cert path
      set_fact:
        tls_target_cert_path: "{{ tls.target_dir + '/' + tls.acme_domains[0] + '/' + tls.target_cert_name }}"
      when:
        - tls.target_cert_path == ""

    - name: Set var for CA path
      set_fact:
        tls_target_ca_path: "{{ tls.target_ca_path }}"
      when:
        - tls.target_ca_path != ""

    - name: Set var for key path
      set_fact:
        tls_target_key_path: "{{ tls.target_key_path }}"
      when:
        - tls.target_key_path != ""

    - name: Set var for fullchain path
      set_fact:
        tls_target_fullchain_path: "{{ tls.target_fullchain_path }}"
      when:
        - tls.target_fullchain_path != ""

    - name: Set var for cert path
      set_fact:
        tls_target_cert_path: "{{ tls.target_cert_path }}"
      when:
        - tls.target_cert_path != ""

    - name: Set var for acme force
      set_fact:
        tls_acme_force: "{{ tls.acme_force }}"

    - name: TLS | Precheck | Ensure certs list
      become: yes
      become_user: root
      shell:
        cmd: |
          openssl x509 -noout -in {{ tls_target_fullchain_path }} -ext subjectAltName | tail -n1 | tr , '\n' | cut -d':' -f2
      changed_when: false
      failed_when: false
      register: cert_list

    - name: Set var for acme force after precheck
      become: yes
      become_user: root
      set_fact:
        tls_acme_force: "--force"
      when: cert_list.stdout_lines | symmetric_difference(tls.acme_domains) | length != 0

    - name: TLS | Certificate Issue | Create new certs in webroot mode
      become: yes
      become_user: root
      shell:
        cmd: |
          ./acme.sh --issue {{ acme_domains }} -w {{ tls.webroot_dir}} \
          --ca-file {{ tls_target_ca_path }} \
          --key-file {{ tls_target_key_path }} \
          --fullchain-file {{ tls_target_fullchain_path }} \
          --cert-file {{ tls_target_cert_path }} \
          --home {{ acme_dir }} --config-home {{ acme_dir }} \
          --server {{ tls.acme_default_ca }} \
          {{ acme_hooks }} \
          {{ tls_acme_force }}
      args:
        chdir: "{{ acme_dir }}"
      when: tls.acme_challenge == "webroot"
      register: ch_ex
      changed_when: ch_ex.rc != 2
      failed_when: false

    - name: TLS | Certificate Issue | Create new certs in standalone mode
      become: yes
      become_user: root
      shell:
        cmd: |
          ./acme.sh --issue --{{ tls.acme_challenge }} {{ acme_domains }} \
          --ca-file {{ tls_target_ca_path }} \
          --key-file {{ tls_target_key_path }} \
          --fullchain-file {{ tls_target_fullchain_path }} \
          --cert-file {{ tls_target_cert_path }} \
          --home {{ acme_dir }} --config-home {{ acme_dir }} \
          --server {{ tls.acme_default_ca }} \
          {{ acme_hooks }} \
          {{ tls_acme_force }}
      args:
        chdir: "{{ acme_dir }}"
      when: tls.acme_challenge == "standalone"
      register: ch_ex
      changed_when: ch_ex.rc != 2
      failed_when: false

    - name: TLS | Certificate Issue | Create new certs in DNS mode
      become: yes
      become_user: root
      shell:
        cmd: |
          ./acme.sh --issue --dns {{ tls.acme_ch_dns_type }} {{ acme_domains }} \
          --ca-file {{ tls_target_ca_path }} \
          --key-file {{ tls_target_key_path }} \
          --fullchain-file {{ tls_target_fullchain_path }} \
          --cert-file {{ tls_target_cert_path }} \
          --home {{ acme_dir }} --config-home {{ acme_dir }} \
          --post-hook "{{ tls.acme_post_hook }}" \
          --server {{ tls.acme_default_ca }} \
          {{ tls_acme_force }}
      args:
        chdir: "{{ acme_dir }}"
      environment: "{{ tls.acme_ch_dns_vars }}"
      when: tls.acme_challenge == "dns"
      register: ch_ex
      changed_when: "'Domains not changed' not in ch_ex.stdout"
      failed_when: false

    - name: TLS | Certificate Issue | Ensure notifications about certs renewal
      become: yes
      become_user: root
      shell:
        cmd: |
          ./acme.sh --set-notify --notify-hook {{ tls.acme_notify_hook_type }}
      args:
        chdir: "{{ acme_dir }}"
      environment: "{{ tls.acme_notify_envvars }}"
      when: tls.acme_notify

    - name: TLS | Postinstall | Ensure prehook for cron
      become: yes
      become_user: root
      lineinfile:
        path: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.conf"
        regexp: '^Le_PreHook='
        line: 'Le_PreHook="{{ tls.acme_pre_hook }}"'
      when: tls.acme_hooks

    - name: TLS | Postinstall | Ensure posthook for cron
      become: yes
      become_user: root
      lineinfile:
        path: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.conf"
        regexp: '^Le_PostHook='
        line: 'Le_PostHook="{{ tls.acme_post_hook }}"'
      when: tls.acme_hooks

    - name: TLS | Postcheck | Ensure certs placement
      stat:
        path: /etc/ssl_certs/{{ tls.acme_domains[0] }}/private.pem
      register: private_key

        #- name: TLS | Postcheck | Forcibly place keypair to target dir
        #  become: yes
        #  become_user: root
        #  copy:
        #    src: '{{ item["src"] }}'
        #    remote_src: yes
        #    dest: '{{ item["dest"] }}'
        #    owner: "{{ ansible_user }}"
        #    group: "{{ ansible_user }}"
        #    mode: '{{ item["mode"] }}'
        #  with_items:
        #    - {src: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.key",
        #       dest: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}/private.pem",
        #       mode: 0600}
        #    - {src: "{{ acme_dir }}/{{ tls.acme_domains[0] }}/fullchain.cer",
        #       dest: "{{ tls.target_dir }}/{{ tls.acme_domains[0] }}/fullchain.pem",
        #       mode: 0644}
        #  when: not private_key.stat.exists
    - name: TLS | Deploy | Fail if private key was not created
      fail:
        msg: "Certificate missing. Check issuance process logs to get reasons"
      when: not private_key.stat.exists

    - name: TLS | Deploy | Create HAProxy chain
      become: yes
      become_user: root
      shell:
        cmd: |
          cat \
          {{ acme_dir }}/{{ tls.acme_domains[0] }}/fullchain.cer \
          {{ acme_dir }}/{{ tls.acme_domains[0] }}/{{ tls.acme_domains[0] }}.key \
          > {{ tls.target_dir }}/{{ tls.acme_domains[0] }}/{{ tls.target_bundle_name }}
      when: tls.target_format == 'haproxy'
      notify:
        - Haproxy reload

    - name: TLS | Postcheck | Fail if got real error on cert issuing time
      fail:
        msg: "Got an error while issue certificate: \n {{ ch_ex.stdout }}"
      when:
        - ch_ex is defined
        - ch_ex.rc is defined
        - ch_ex.rc != 0
        - not 'Domains not changed' in ch_ex.stdout
  when: tls.acme_domains | length != 0

